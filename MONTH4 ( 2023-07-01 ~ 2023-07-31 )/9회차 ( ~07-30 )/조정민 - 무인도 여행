import java.util.*;

class Solution {
    int[] X = {1, 0, -1, 0};
    int[] Y = {0, -1, 0, 1};
    
    public int[] solution(String[] maps) {
        int[] answer = {};
        int[][] graph = new int[maps.length][maps[0].length()];
        boolean[][] visited = new boolean[maps.length][maps[0].length()];
        List<Integer> list = new ArrayList<>();
            
        for(int i = 0; i < maps.length; i++) {
            String[] str = maps[i].split("");
            Arrays.fill(visited[i], false);
            
            for(int j = 0; j < str.length; j++) {
                if(str[j].equals("X")) {
                    graph[i][j] = 0;    
                } else {
                    graph[i][j] = Integer.valueOf(str[j]);
                }                
            }
        }
        
        for(int i = 0; i < graph.length; i++) {
            for(int j = 0; j < graph[0].length; j++) {
                if(graph[i][j] != 0 && !visited[i][j]) {
                    list.add(bfs(new int[] {i, j}, graph, visited));
                }             
            }
        }
        
        answer = new int[list.size()];
        
        Collections.sort(list);
        
        for(int i = 0; i < list.size(); i++) {
            answer[i] = list.get(i);
        }
        
        if(list.size() == 0) {
            answer = new int[] {-1};
        }
        
        return answer;
    }
    
    public int bfs(int[] xy, int[][] graph, boolean[][] visited) {
        int result = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(xy);
        visited[xy[0]][xy[1]] = true;
        
        while(!queue.isEmpty()) {
            int[] target = queue.poll();
            int x = target[0];
            int y = target[1];
            
            result += graph[x][y]; 
            
            for(int i = 0; i < 4; i++) {
                int x2 = x + X[i];
                int y2 = y + Y[i];
                
                if(x2 < 0 || x2 >= graph.length || y2 < 0 || y2 >= graph[0].length)
                    continue;
                
                if(visited[x2][y2] || graph[x2][y2] == 0)
                    continue;
                
                visited[x2][y2] = true;
                queue.add(new int[] {x2, y2});
            }
        }
        
        System.out.println(result);
        return result;
    }
    
    
}
